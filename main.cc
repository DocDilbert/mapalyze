#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <iterator>
#include <algorithm>
#include <cxxopts.hpp>
#include <string>
#include <fstream>
#include <streambuf>
#include <boost/algorithm/string/predicate.hpp>
#include <boost/algorithm/string/classification.hpp>
#include <boost/algorithm/string/split.hpp>

using namespace std;

struct MapSection
{
  uint32_t address;
  uint32_t size;
  std::string object_name;

  friend ostream &operator<<(ostream &os, const MapSection &msec);
};

ostream &operator<<(ostream &os, const MapSection &msec)
{
  os << "0x" << hex << uppercase << setw(8) << msec.address << " |" << dec << setw(8) << msec.size << " | " << msec.object_name;
  return os;
}

std::string get_file_contents(const char *filename)
{
  std::ifstream in(filename, std::ios::in | std::ios::binary);
  if (in)
  {
    std::string contents;
    in.seekg(0, std::ios::end);
    contents.resize(in.tellg());
    in.seekg(0, std::ios::beg);
    in.read(&contents[0], contents.size());
    in.close();
    return (contents);
  }
  throw(errno);
}

std::vector<std::string>
split(std::string const &original, char separator)
{
  std::vector<std::string> results;
  std::string::const_iterator start = original.begin();
  std::string::const_iterator end = original.end();
  std::string::const_iterator next = std::find(start, end, separator);
  while (next != end)
  {
    results.push_back(std::string(start, next));
    start = next + 1;
    auto next_char = start + 1;
    next = std::find(start, end, separator);

    while (next == next_char)
    {
      start = next + 1;
      next_char = start + 1;
      next = std::find(start, end, separator);
    }
  }
  results.push_back(std::string(start, next));
  return results;
}

MapSection parse_entry(string const &entry)
{
  vector<string> container;
  auto splitted = boost::split(container, entry, boost::is_any_of(" "), boost::token_compress_on);
  if (splitted.size() <= 1)
  {
    throw "No enough elements";
  }

  if (!boost::starts_with(splitted[1], "0x"))
  {
    throw "No enough elements";
  };

  std::size_t processed = 0;
  auto address = std::stoul(splitted[1].substr(2, string::npos), &processed, 16);

  if (splitted.size() <= 2)
  {
    throw "No enough elements";
  }

  if (!boost::starts_with(splitted[2], "0x"))
  {
    throw "No enough elements";
  };

  auto size = std::stoul(splitted[2].substr(2, string::npos), &processed, 16);
  if (splitted.size() <= 3)
  {
    throw "No enough elements";
  }

  MapSection sec = {
      .address = static_cast<uint32_t>(address),
      .size = static_cast<uint32_t>(size),
      .object_name = splitted[3]};

  return sec;
}
void parse_lines(string const &str)
{
  const char separator = '\n';
  std::string::const_iterator start = str.begin();
  std::string::const_iterator end = str.end();
  std::string::const_iterator next = std::find(start, end, separator);

  auto i = 0;
  while (next != end)
  {
    if (i == 5000)
    {
      break;
    }
    try
    {
      auto sec = parse_entry(std::string(start, next));
      cout << sec << endl;
    }
    catch (...)
    {
    }
    i++;
    start = next + 1;
    next = std::find(start, end, separator);
  }
}

int main(int argc, char *argv[])
{
  cxxopts::Options options("mapalyze", "A tool to analyze map files generated by gcc.");
  options
      .positional_help("[file.map]");
  options.add_options()("f,file", "Name of the map file", cxxopts::value<std::string>())("h,help", "Print usage")("filename", "Name of the map file", cxxopts::value<std::string>());
  options.parse_positional("filename");
  auto result = options.parse(argc, argv);

  if (result.count("help"))
  {
    std::cout << options.help() << std::endl;
    exit(0);
  }

  if (!result.count("filename"))
  {
    std::cout << "ERROR: filename must be specified." << std::endl
              << std::endl;
    ;
    std::cout << options.help() << std::endl;
    exit(-1);
  }

  auto &filename = result["filename"].as<std::string>();

  std::string str = get_file_contents(filename.c_str());

  // find sections
  auto mem_cfg_pos = str.find("Memory Configuration", 0);
  auto linker_pos = str.find("Linker script and memory map", mem_cfg_pos);
  auto output_pos = str.find("OUTPUT(", linker_pos);

  auto mem_cfg = str.substr(mem_cfg_pos, linker_pos - mem_cfg_pos);
  auto linkage = str.substr(linker_pos, output_pos - linker_pos);

  parse_lines(linkage);
  //auto contents = split(str, '\n');
  //std::cout << contents.size() << std::endl;
  return 0;
}
